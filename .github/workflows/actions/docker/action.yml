name: docker
author: Vladimir Silyaev
description: Cache docker images
inputs:
  image:
    description: "image cached in the repository"
    required: true
  registry:
    description: 'Server address of Docker registry. If not set then will default to Docker Hub'
    required: false
    default: 'ghcr.io'
  name:
    description: 'Publicly visiblle name of the image/package'
    required: false
  username:
    description: 'Username used to log against the Docker registry'
    required: false
  password:
    description: 'Password or personal access token used to log against the Docker registry'
    required: true

outputs:
  fetch:
    description: 'command to pull image'
    value: ${{ steps.setup.outputs.fetch }}
  cache:
    description: 'options for docket'
    value: ${{ steps.setup.outputs.cache }}

runs:
  using: "composite"
  steps:
    - name: docker image cache
      shell: bash
      id: setup
      run: |
        set -x
        for image in ${{ inputs.image }}; do
          echo "::group::fetch $image"
          repo_image=$(make $image.image_print)
          package='${{ inputs.package  }}'
          package="${package:-ci_cache}"
          IMAGE_ID=${{ inputs.registry }}/$GITHUB_REPOSITORY/$package
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          TAG="$GITHUB_REF_NAME"
          TAG=$(echo $TAG | tr '[A-Z].' '[a-z]_')
          old_id=''
          if [ -z '${{ inputs.package  }}' ]; then
            REGISTRY_IMAGE="$IMAGE_ID:${image}_$TAG"
          else
            REGISTRY_IMAGE="$IMAGE_ID:$TAG"
          fi
          if docker pull $REGISTRY_IMAGE; then
            old_id=$(docker image inspect $REGISTRY_IMAGE --format "{{.ID}}")
            echo "::info :: $image - using $REGISTRY_IMAGE as cache $old_id"
          fi
          echo "::group::build $image"
          make $image.image DOCKER_BUILD_OPTS="--cache-from=$REGISTRY_IMAGE"
          if [ -n '${{ inputs.password }}' ]; then
            echo "::group::push $image"
            new_id=$(docker image inspect $repo_image --format "{{.ID}}")
            if [ "$old_id" != "$new_id" ]; then
              docker tag $repo_image $REGISTRY_IMAGE
              username='${{ inputs.username }}'
              echo '${{ inputs.password }}' | docker login ${{ inputs.registry }} -u ${username:-'${{ github.actor }}'} --password-stdin
              if docker push $REGISTRY_IMAGE; then
                echo "::info :: $image pushed as $REGISTRY_IMAGE"
              else
                echo "::warning :: $image can't push to $REGISTRY_IMAGE"
                new_id=
              fi
              docker logout ${{ inputs.registry }}
            fi
          fi
          if [ -n "${old_id}${new_id}" ]; then
            echo "fetch=docker pull $REGISTRY_IMAGE" >> $GITHUB_OUTPUT
            echo "cache=DOCKER_BUILD_OPTS='--cache-from=$REGISTRY_IMAGE'" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
        done
