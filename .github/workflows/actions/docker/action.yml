name: docker
author: Vladimir Silyaev
description: Cache docker images
inputs:
  image:
    description: "image cached in the repository"
    required: true
  registry:
    description: 'Server address of Docker registry. If not set then will default to Docker Hub'
    required: false
    default: 'ghcr.io'
  username:
    description: 'Username used to log against the Docker registry'
    required: false
  password:
    description: 'Password or personal access token used to log against the Docker registry'
    required: true

outputs:
  fetch:
    description: 'command to pull image'
    value: ${{ steps.setup.outputs.fetch }}
  cache:
    description: 'options for docket'
    value: ${{ steps.setup.outputs.cache }}

runs:
  using: "composite"
  steps:
    - name: docker image cache
      shell: bash
      id: setup
      run: |
        echo "::group::fetch"
        set -x
        image=$(make ${{ inputs.image }}.image_print)
        IMAGE_ID=${{ inputs.registry }}/$GITHUB_REPOSITORY/${{ inputs.image }}
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        TAG="$GITHUB_REF_NAME"
        TAG=$(echo $TAG | tr '[A-Z].' '[a-z]_')
        old_id=''
        if docker pull $IMAGE_ID:$TAG; then
          old_id=$(docker image inspect $IMAGE_ID:$TAG --format "{{.ID}}")
        fi
        echo "::group::build"
        make ${{ inputs.image }}.image DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID:$TAG"
        if [ -n '${{ inputs.password }}' ]; then
          echo "::group::push"
          new_id=$(docker image inspect $image --format "{{.ID}}")
          if [ "$old_id" != "$new_id" ]; then
            docker tag $image $IMAGE_ID:$TAG
            username='${{ inputs.username }}'
            echo '${{ inputs.password }}' | docker login ${{ inputs.registry }} -u ${username:-'${{ github.actor }}'} --password-stdin
            if docker push $IMAGE_ID:$TAG ; then
              echo "::info :: pushed $IMAGE_ID:$TAG"
            else
              echo "::warning :: can't push $IMAGE_ID:$TAG"
              new_id=
            fi
            docker logout ${{ inputs.registry }}
          fi
        fi
        if [ -n "${old_id}${new_id}" ]; then
          echo "fetch=docker pull $IMAGE_ID:$TAG" >> $GITHUB_OUTPUT
          echo "cache=DOCKER_BUILD_OPTS='--cache-from=$IMAGE_ID:$TAG'" >> $GITHUB_OUTPUT
        fi
